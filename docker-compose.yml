version: "3.8"

services:
    # Setup service is created in accordance to elasticsearch documentation.
    # Refer to: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - ./scripts:/usr/share/elasticsearch/scripts
        networks:
            - elastic-net
        user: "0"
        command: >
            bash -c 'bash scripts/certSetup.sh ${ELASTIC_PASSWORD} ${KIBANA_PASSWORD}'
    
    esnode1:
        depends_on:
            - setup
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION} 
        volumes:
            - certs:/usr/share/elasticsearch/config/certs
            - elasticsearch-volume:/usr/share/elasticsearch/data
        ports:
            - ${ES_PORT}:9200
        networks:
            - elastic-net
        environment:
            - node.name=esnode1
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
            - bootstrap.memory_lock=true
            - discovery.type=single-node
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/esnode1/esnode1.key
            - xpack.security.http.ssl.certificate=certs/esnode1/esnode1.crt
            - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.http.ssl.verification_mode=certificate
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/esnode1/esnode1.key
            - xpack.security.transport.ssl.certificate=certs/esnode1/esnode1.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ## Health check to check that elasticsearch is fully up.
        healthcheck:
            test: curl -s --cacert config/certs/ca/ca.crt https://localhost:9200/_cluster/health?wait_for_status=green&timeout=50s || exit 1
            interval: 10s
            timeout: 10s 
            retries: 10
        logging:
            driver: "json-file"
            options:
                max-size: "200k"
                max-file: "10"
    kibana:
        # The following will make sure that Kibana runs only after elasticsearch is up and healthy.
        depends_on:
            esnode1:
                condition: service_healthy
        image: docker.elastic.co/kibana/kibana:${STACK_VERSION} 
        volumes:
            - certs:/usr/share/kibana/config/certs
            - kibana-volume:/usr/share/kibana/data
        ports:
            - ${KIBANA_PORT}:5601
        networks:
            - elastic-net
        environment:
            - SERVERNAME=kibana
            - ELASTICSEARCH_HOSTS=https://esnode1:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
        healthcheck:
            test: curl -s -f --cacert config/certs/ca/ca.crt -u elastic:${KIBANA_PASSWORD} localhost:5601/api/task_manager/_health || exit 1
            interval: 30s
            timeout: 30s
            retries: 5
        logging:
            driver: "json-file"
            options:
                max-size: "200k"
                max-file: "10"
volumes:
    certs:
        driver: local
    scripts:
        driver: local
    elasticsearch-volume:
        driver: local
    kibana-volume:
        driver: local
networks:
    elastic-net:
        driver: bridge
