version: "3.8"

services:
    # Setup service is created in accordance to elasticsearch documentation.
    # Refer to: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html
    setup:
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
        volumes:
            - ./certs:/usr/share/elasticsearch/config/certs
        user: "0"
        command: >
            bash -c '
                if [ x${ELASTIC_PASSWORD} == x ]; then
                    echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
                    exit 1;
                elif [ x${KIBANA_PASSWORD} == x ]; then
                    echo "Set the KIBANA_PASSWORD environment variable in the .env file";
                    exit 1;
                fi;
                if [ ! -f config/certs/ca.zip ]; then
                    echo "Creating CA";
                    bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
                    unzip config/certs/ca.zip -d config/certs;
                fi;
                if [ ! -f config/certs/certs.zip ]; then
                    echo "Creating certs";
                    echo -ne \
                    "instances:\n"\
                    "  - name: elasticsearch\n"\
                    "    dns:\n"\
                    "      - elasticsearch\n"\
                    "      - localhost\n"\
                    "    ip:\n"\
                    "      - 127.0.0.1\n"\
                    > config/certs/instances.yml;
                    bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
                    unzip config/certs/certs.zip -d config/certs;
                fi;
                echo "Setting file permissions"
                chown -R root:root config/certs;
                find . -type d -exec chmod 750 \{\} \;;
                find . -type f -exec chmod 640 \{\} \;;
                echo "Waiting for Elasticsearch availability";
                until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
                echo "Setting kibana_system password";
                until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD]}\"}" | grep -q "^{}"; do sleep 10; done;
                echo "All done!";
            '
        healthcheck:
            test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
            interval: 1s
            timeout: 5s
            retries: 120

    elasticsearch:
        depends_on:
            setup:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION} 
        container_name: elasticsearch
        volumes:
            - ./certs:/usr/share/elasticsearch/config/certs
            - ./elasticsearch-volume:/usr/share/elasticsearch/data
        ports:
            - 9200:9200
        networks:
            - elastic-net
        # Health check to check that elasticsearch is fully up.
        healthcheck:
            test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"] 
            interval: 30s
            timeout: 30s
            retries: 2
        # We disable security for development purposes, so that we don't need authentication. Security should be enabled in PROD.
        # Single node to elect this node as master and to not join any other cluster.
        environment:
            #- xpack.security.enabled=false
            #- discovery.type=single-node
            - node.name=es02
            - cluster.name=${CLUSTER_NAME}
            - cluster.initial_master_nodes=elasticsearch
            #- discovery.seed_hosts=es01,es03
            - bootstrap.memory_lock=true
            - xpack.security.enabled=true
            - xpack.security.http.ssl.enabled=true
            - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
            - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
            - xpack.security.http.ssl.certificate_authorities=certs/elasticsearch/elasticsearch.crt
            - xpack.security.transport.ssl.enabled=true
            - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
            - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
            - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
            - xpack.security.transport.ssl.verification_mode=certificate
            - xpack.license.self_generated.type=${LICENSE}
        mem_limit: ${MEM_LIMIT}
        # Set the locked-in-memory address space to unlimited.
        ulimits:
            memlock:
                soft: -1
                hard: -1
        logging:
            driver: "local"
            options:
                max-size: "200k"
                max-file: "10"
    kibana:
        # The following will make sure that Kibana runs only after elasticsearch is up and healthy.
        depends_on:
            elasticsearch:
                condition: service_healthy
        image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION} 
        container_name: kibana
        volumes:
            - ./certs:/usr/share/kibana/config/certs
            - ./kibana-volume:/usr/share/kibana/data
        ports:
            - 5601:5601
        networks:
            - elastic-net
        environment:
            - SERVERNAME=kibana
            - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
            - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
        healthcheck:
            test: curl --silent --fail localhost:5601/api/task_manager/_health || exit 1
            interval: 30s
            timeout: 30s
            retries: 5
        logging:
            driver: "local"
            options:
                max-size: "200k"
                max-file: "10"
volumes:
    certs:
        driver: local
    elasticsearch-volume:
        driver: local
    kibana-volume:
        driver: local
networks:
    elastic-net:
        driver: bridge
